name: Recipe Website CI/CD # Nama workflow Anda

on:
  push:
    branches: [ "main" ] # Trigger saat ada push ke branch main
  pull_request:
    branches: [ "main" ] # Trigger saat ada Pull Request ke branch main

permissions:
  contents: read # Memberikan izin baca untuk konten repositori

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }} # Variabel environment dari secrets
  SERVICE_NAME: recipe-website
  REGION: asia-southeast1

jobs:
  test: # Nama job untuk pengujian
    runs-on: ubuntu-latest # Runner yang digunakan

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: recipedb
          MYSQL_USER: recipeadmin
          MYSQL_PASSWORD: kod12345
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v4 # Menggunakan actions/checkout versi 4 yang lebih baru

    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }} # Menggunakan direktori cache composer
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }} # Key cache yang lebih robust
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Set up PHP # Mengatur PHP sesuai kebutuhan proyek Anda
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, gd, pdo_mysql
        coverage: xdebug # Untuk code coverage dengan PHPUnit
        tools: composer:v2

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress

    - name: Create test database and import schema
      run: |
        echo "Waiting for MySQL service to be ready..."
        # Loop ini akan mencoba koneksi ke MySQL berulang kali
        for i in $(seq 1 18); do # Coba 18 kali dengan jeda 5 detik = 90 detik
          # PASTIKAN HOST ADALAH 'mysql' DAN USER/PASS ADALAH 'recipeadmin'/'kod12345'
          mysql -h mysql -u recipeadmin -pkod12345 -e "SELECT 1" 2>/dev/null && break || true
          echo "MySQL not ready yet, waiting 5 seconds..."
          sleep 5
        done

        # Tambahkan debug info untuk melihat apakah MySQL benar-benar bisa dijangkau
        echo "Attempting to connect to MySQL for final check..."
        mysql -h mysql -u recipeadmin -pkod12345 -e "SHOW DATABASES;" || { echo "Failed to connect to MySQL after waiting. Exiting."; exit 1; }

        # PASTIKAN HOST ADALAH 'mysql' DAN USER/PASS ADALAH 'recipeadmin'/'kod12345'
        # PASTIKAN NAMA DATABASE 'recipedb'
        mysql -h mysql -u recipeadmin -pkod12345 recipedb < recipedb.sql # <-- Diperbarui menjadi 'recipedb'

    - name: Run PHPUnit tests
      run: |
        ./vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

    - name: PHP Syntax Check
      run: find . -type f -name "*.php" -exec php -l {} \;

    - name: PHP Code Sniffer
      run: |
        ./vendor/bin/phpcs --standard=PSR12 --extensions=php .

    - name: PHP Mess Detector
      run: |
        ./vendor/bin/phpmd . text cleancode,codesize,controversial,design,naming,unusedcode