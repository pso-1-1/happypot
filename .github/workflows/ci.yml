name: Recipe Website CI/CD # Nama workflow Anda

on:
  push:
    branches: [ "main" ] # Trigger saat ada push ke branch main
  pull_request:
    branches: [ "main" ] # Trigger saat ada Pull Request ke branch main

permissions:
  contents: read # Memberikan izin baca untuk konten repositori

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }} # Variabel environment dari secrets
  SERVICE_NAME: recipe-website
  REGION: asia-southeast1

jobs:
  test: # Nama job untuk pengujian
    runs-on: ubuntu-latest # Runner yang digunakan
    services: # Konfigurasi service container untuk MySQL
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: recipedb_test
          MYSQL_USER: recipeadmin
          MYSQL_PASSWORD: kod12345
          # --- OPSI DEBUGGING MYSQL ---
          # Tambahkan ini untuk debugging verbose jika ada masalah boot
          # MYSQL_LOG_CONSOLE: true # Log ke konsol Docker (seringkali sudah default)
          # MYSQL_GENERAL_LOG: 1 # Ini akan mencetak setiap query SQL (sangat verbose!)
          # MYSQL_GENERAL_LOG_FILE: /dev/stdout # Pastikan log umum ke stdout
          # --- AKHIR OPSI DEBUGGING ---
        ports:
          - 3306:3306 # Port mapping: host:container
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3 # Health check untuk MySQL

    steps:
    - uses: actions/checkout@v4 # Menggunakan actions/checkout versi 4 yang lebih baru

    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }} # Menggunakan direktori cache composer
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }} # Key cache yang lebih robust
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Set up PHP # Mengatur PHP sesuai kebutuhan proyek Anda
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, gd, pdo_mysql
        coverage: xdebug # Untuk code coverage dengan PHPUnit
        tools: composer:v2

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress

    - name: Wait for MySQL to be ready
      run: |
        echo "Waiting for MySQL to be fully ready..."
        # Loop diperpanjang hingga 120 detik jika diperlukan, atau sesuaikan
        for i in $(seq 1 120); do
          if mysqladmin ping -h mysql --silent; then
            echo "MySQL is ready!"
            break
          fi
          echo "Still waiting for MySQL... ($i/120)"
          sleep 1
        done
        # Jika loop selesai tanpa break, paksa kegagalan
        mysqladmin ping -h mysql || { echo "MySQL did not become ready in time!"; exit 1; }
      env:
        MYSQL_PWD: rootpassword

    - name: Debug MySQL Service Network and Logs # <--- LANGKAH DEBUGGING PENTING
      if: failure() || cancelled() # Jalankan hanya jika langkah sebelumnya (Wait for MySQL) gagal atau dibatalkan
      run: |
        echo "--- Debugging MySQL Service Network ---"
        echo "Attempting to ping 'mysql' host:"
        ping -c 5 mysql || echo "Ping failed. Name resolution issue likely."
        echo "Attempting 'getent hosts mysql':"
        getent hosts mysql || echo "getent failed. DNS lookup issue likely."
        echo "--- Checking MySQL Container Logs ---"
        docker logs mysql || echo "Failed to get Docker logs for 'mysql' container."
        echo "--- Inspecting MySQL Container ---"
        docker inspect mysql || echo "Failed to inspect 'mysql' container."
      continue-on-error: true # Agar workflow tetap lanjut (atau setidaknya mencetak log ini) untuk diagnosis

    - name: Create test database and import schema
      run: |
        # Gunakan 'mysql' sebagai host untuk konsistensi
        mysql -h mysql -u root -prootpassword recipedb_test < recipedb.sql

    - name: Run PHPUnit tests
      run: |
        ./vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

    - name: PHP Syntax Check
      run: find . -type f -name "*.php" -exec php -l {} \;

    - name: PHP Code Sniffer
      run: |
        ./vendor/bin/phpcs --standard=PSR12 --extensions=php .

    - name: PHP Mess Detector
      run: |
        ./vendor/bin/phpmd . text cleancode,codesize,controversial,design,naming,unusedcode